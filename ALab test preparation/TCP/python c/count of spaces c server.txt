#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <arpa/inet.h>
int c;

void time_out(int semnal) {
    int32_t r = -1;
    r = htonl(r);
    printf("Time out.\n");
    send(c, &r, sizeof(int32_t), 0);
    close(c); // desi nu am primit nimic de la client in 10 secunde, inchidem civilizat conexiunea cu acesta
    exit(1);
}

void countSpaces(int connection_socket){
    char buffer[1024];
    int l = recv(connection_socket, buffer, 1024, 0);
    if(l<=0){
        perror("Error on receive");
    }
    uint32_t spaces =0;
    for(int i =0;i<l; i++){
        if(buffer[i] == ' '){
            spaces++;
        }
    }
    uint32_t spaces_converted  = htonl(spaces);
    send(connection_socket, &spaces_converted, sizeof(spaces_converted), 0);
    close(connection_socket);
    exit(0);

//    int cod;
//    int32_t r;
//    uint8_t b;
//    // Observatie: Deoarece dimensiunea tipului int difera de la platforma la platforma,
//    // (spre exemplu, in Borland C in DOS e reprezentat pe 2 octeti, iar in C sub Linux pe
//    // 4 octeti) este necesara utilizarea unor tipuri intregi standard. A se vedea
//    // stdint.h.
//    struct sockaddr_in server;
//
//    if (c < 0) {
//        fprintf(stderr, "Eroare la stabilirea conexiunii cu clientul.\n");
//        exit(1);
//    }
//    else
//        printf("Un nou client s-a conectat cu succes.\n");
//
//    signal(SIGALRM, time_out);
//    alarm(10);
//
//    r = 0; // rezultatul, numarul de caractere spatii primite de la client
//    do {
//        cod = recv(c, &b, 1, 0);
//        printf("Am primit %d caracter.\n", cod);
//        //printf("Am primit %d caractere %c.\n", cod, b);
//        if (cod == 1) // citire cu succes a unui caracter
//            alarm(10);  // resetam timerul si asteptam din nou 10 secunde urmatorul caracter
//
//        if (cod != 1) {
//            r = -1;
//            break;
//        }
//
//        if (b == ' ') {
//            // Paragraful 5 din protocolul
//            if (r == INT32_MAX) { // intregul maxim pozitiv pe 4 octetii cu semn sau 0x7FFFFFFF (a se vedea stdint.h)
//                r = -2;
//                break;
//            }
//            r++;
//        }
//    }
//    while (b != 0); // sirul de caractere de la client se considera terminat la intalnirea caracterului 0 (NULL, '\0')
//    // Paragraful 2 - terminam citirea sirului de la client la primirea caracterului NULL
//
//    alarm(0); // oprim timerul
//
//    r = htonl(r);
//    send(c, &r, sizeof(int32_t), 0);
//    r = ntohl(r);
//
//    close(c);
//
//    if (r >= 0)
//        printf("Am inchis cu succes conexiunea cu un client. I-am trimis %d spatii.\n", r);
//    else {
//        printf("Am inchis cu eroare conexiunea cu un client. Cod de eroare %d.\n", r);
//        exit(1);
//    }
//
//    exit(0);
//    // Terminam procesul fiu - foarte important!!! altfel numarul de procese creste exponential.
//    // Fiul se termina dupa ce deserveste clientul.
}


int main() {
    int welcoming_socket = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server, client;
    memset(&server, sizeof(server), 0);
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(1234);
    server.sin_family = AF_INET;

    if(bind(welcoming_socket, (struct sockaddr*) &server, sizeof(server)) < 0){
        perror("Error on bind: ");
    }
    listen(welcoming_socket, 10);
    while(1){
        int length = sizeof(client) ;
        c = accept(welcoming_socket, (struct sockaddr*)&client, (socklen_t*)&length);
        if(fork() == 0){
            countSpaces(c);
            exit(0);
        }
        // parent
    }

}
